name: Security Check

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]

jobs:
  security-scan:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Fetch full history to check for secrets
    
    - name: Check for sensitive files
      run: |
        echo "Checking for sensitive files..."
        
        # Check for environment files
        if find . -name "*.env*" -not -path "./.git/*" | grep -q .; then
          echo "❌ Found .env files that should be in .gitignore"
          find . -name "*.env*" -not -path "./.git/*"
          exit 1
        fi
        
        # Check for service account keys
        if find . -name "*service-account*.json" -not -path "./.git/*" | grep -q .; then
          echo "❌ Found service account key files"
          find . -name "*service-account*.json" -not -path "./.git/*"
          exit 1
        fi
        
        # Check for internal documentation
        if find . -name "*_SETUP.md" -o -name "*_DEBUG.md" -o -name "*_TROUBLESHOOTING.md" -o -name "COMPREHENSIVE_*.md" -o -name "IMPLEMENTATION_*.md" -o -name "VERCEL_*.md" -o -name "GOOGLE_*.md" -o -name "FIREBASE_*.md" -o -name "ADMIN_*.md" | grep -q .; then
          echo "❌ Found internal documentation files that should not be in public repo"
          find . -name "*_SETUP.md" -o -name "*_DEBUG.md" -o -name "*_TROUBLESHOOTING.md" -o -name "COMPREHENSIVE_*.md" -o -name "IMPLEMENTATION_*.md" -o -name "VERCEL_*.md" -o -name "GOOGLE_*.md" -o -name "FIREBASE_*.md" -o -name "ADMIN_*.md"
          exit 1
        fi
        
        echo "✅ No sensitive files found"
    
    - name: Check for hardcoded secrets in code
      run: |
        echo "Checking for hardcoded secrets in code..."
        
        # Check for hardcoded API keys (not environment variable references)
        if grep -r -E "api[_-]?key\s*[:=]\s*['\"][^'\"]{10,}" --include="*.js" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules --exclude-dir=.git . | grep -v "NEXT_PUBLIC_" | grep -q .; then
          echo "❌ Found hardcoded API keys in code"
          grep -r -E "api[_-]?key\s*[:=]\s*['\"][^'\"]{10,}" --include="*.js" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules --exclude-dir=.git . | grep -v "NEXT_PUBLIC_"
          exit 1
        fi
        
        # Check for hardcoded secrets (not environment variable references)
        if grep -r -E "secret\s*[:=]\s*['\"][^'\"]{10,}" --include="*.js" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules --exclude-dir=.git . | grep -v "NEXT_PUBLIC_" | grep -q .; then
          echo "❌ Found hardcoded secrets in code"
          grep -r -E "secret\s*[:=]\s*['\"][^'\"]{10,}" --include="*.js" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules --exclude-dir=.git . | grep -v "NEXT_PUBLIC_"
          exit 1
        fi
        
        # Check for hardcoded passwords (not environment variable references)
        if grep -r -E "password\s*[:=]\s*['\"][^'\"]{6,}" --include="*.js" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules --exclude-dir=.git . | grep -v "NEXT_PUBLIC_" | grep -q .; then
          echo "❌ Found hardcoded passwords in code"
          grep -r -E "password\s*[:=]\s*['\"][^'\"]{6,}" --include="*.js" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules --exclude-dir=.git . | grep -v "NEXT_PUBLIC_"
          exit 1
        fi
        
        # Check for actual secret values (more specific patterns)
        # Look for patterns that are likely to be actual secrets, not code patterns
        if grep -r -E "(apiKey|secret|password|token|key)\s*[:=]\s*['\"][A-Za-z0-9+/]{20,}['\"]" --include="*.js" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules --exclude-dir=.git . | grep -v "NEXT_PUBLIC_" | grep -v "process.env" | grep -q .; then
          echo "❌ Found potential hardcoded secret values in code"
          grep -r -E "(apiKey|secret|password|token|key)\s*[:=]\s*['\"][A-Za-z0-9+/]{20,}['\"]" --include="*.js" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules --exclude-dir=.git . | grep -v "NEXT_PUBLIC_" | grep -v "process.env"
          exit 1
        fi
        
        echo "✅ No hardcoded secrets found in code"
    
    - name: Check .gitignore
      run: |
        echo "Checking .gitignore configuration..."
        
        if [ ! -f .gitignore ]; then
          echo "❌ .gitignore file is missing"
          exit 1
        fi
        
        # Check for essential patterns in .gitignore
        required_patterns=(
          ".env"
          "node_modules/"
          "*.db"
          "*-service-account.json"
          "*_SETUP.md"
        )
        
        for pattern in "${required_patterns[@]}"; do
          if ! grep -q "^$pattern" .gitignore; then
            echo "❌ Missing required pattern in .gitignore: $pattern"
            exit 1
          fi
        done
        
        echo "✅ .gitignore configuration looks good"
    
    - name: Check for large files
      run: |
        echo "Checking for large files..."
        
        # Find files larger than 10MB
        large_files=$(find . -type f -size +10M -not -path "./.git/*" -not -path "./node_modules/*")
        
        if [ -n "$large_files" ]; then
          echo "❌ Found large files (>10MB):"
          echo "$large_files"
          exit 1
        fi
        
        echo "✅ No large files found"
    
    - name: Security scan summary
      run: |
        echo "🔒 Security scan completed successfully!"
        echo "✅ No sensitive files found"
        echo "✅ No hardcoded secrets detected in code"
        echo "✅ .gitignore properly configured"
        echo "✅ No large files found"