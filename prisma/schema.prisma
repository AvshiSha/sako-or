generator client {
  provider = "prisma-client-js"
  // Force regeneration for production
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  products    Product[]

  @@map("categories")
}

model Product {
  id                String         @id @default(cuid())
  name              String
  slug              String         @unique
  description       String
  baseSku           String         @unique
  featured          Boolean        @default(false)
  isNew             Boolean        @default(false)
  isActive          Boolean        @default(true)
  createdAt         DateTime       @default(now())
  updatedAt         DateTime       @updatedAt
  upperMaterial     String?
  materialInnerSole String?
  lining            String?
  sole              String?
  heelHeight        String?
  shippingReturns   String?
  categoryId        String
  colorVariants     ColorVariant[]
  tags              ProductTag[]
  category          Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("products")
}

model ColorVariant {
  id              String              @id @default(cuid())
  colorName       String
  colorSlug       String
  colorHex        String?
  price           Float?
  salePrice       Float?
  saleStartDate   DateTime?
  saleEndDate     DateTime?
  stock           Int                 @default(0)
  isActive        Boolean             @default(true)
  metaTitle       String?
  metaDescription String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  productId       String
  images          ColorVariantImage[]
  sizes           ColorVariantSize[]
  product         Product             @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, colorSlug])
  @@map("color_variants")
}

model ColorVariantImage {
  id             String       @id @default(cuid())
  url            String
  alt            String?
  isPrimary      Boolean      @default(false)
  order          Int          @default(0)
  createdAt      DateTime     @default(now())
  colorVariantId String
  colorVariant   ColorVariant @relation(fields: [colorVariantId], references: [id], onDelete: Cascade)

  @@map("color_variant_images")
}

model ColorVariantSize {
  id             String       @id @default(cuid())
  size           String
  stock          Int          @default(0)
  sku            String?      @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  colorVariantId String
  colorVariant   ColorVariant @relation(fields: [colorVariantId], references: [id], onDelete: Cascade)

  @@unique([colorVariantId, size])
  @@map("color_variant_sizes")
}

model Tag {
  id        String       @id @default(cuid())
  name      String       @unique
  slug      String       @unique
  createdAt DateTime     @default(now())
  products  ProductTag[]

  @@map("tags")
}

model ProductTag {
  id        String  @id @default(cuid())
  productId String
  tagId     String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([productId, tagId])
  @@map("product_tags")
}

model Order {
  id                   String      @id @default(cuid())
  orderNumber          String      @unique
  status               String      @default("pending")
  total                Float
  currency             String      @default("ILS")
  customerName         String?
  customerEmail        String?
  customerPhone        String?
  paymentStatus        String      @default("pending")
  paymentMethod        String?
  paymentData          String?
  cardcomLowProfileId  String?
  cardcomTransactionId String?
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  orderItems           OrderItem[]
  payments             Payment[]

  @@map("orders")
}

model OrderItem {
  id          String   @id @default(cuid())
  quantity    Int
  price       Float
  total       Float
  productName String
  productSku  String
  colorName   String?
  size        String?
  createdAt   DateTime @default(now())
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Payment {
  id                   String   @id @default(cuid())
  amount               Float
  currency             String   @default("ILS")
  status               String   @default("pending")
  cardcomLowProfileId  String?
  cardcomTransactionId String?
  cardcomResponseCode  Int?
  cardcomDescription   String?
  paymentMethod        String?
  last4Digits          String?
  cardBrand            String?
  tokenId              String?
  tokenExpiry          String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  orderId              String
  order                Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model PaymentToken {
  id            String   @id @default(cuid())
  token         String   @unique
  last4Digits   String?
  cardBrand     String?
  cardExpiry    String?
  isActive      Boolean  @default(true)
  customerEmail String?
  customerName  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("payment_tokens")
}
