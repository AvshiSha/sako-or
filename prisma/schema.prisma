// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      String   @default("USER") // USER or ADMIN
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model Category {
  id          String    @id @default(cuid())
  name        String    @unique
  slug        String    @unique
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  products Product[]

  @@map("categories")
}

model Product {
  id          String   @id @default(cuid())
  // Base product information (shared across all colors)
  name        String
  slug        String   @unique
  description String
  baseSku     String   @unique // Base SKU for the product family (e.g., "0000-0000")
  featured    Boolean  @default(false)
  isNew       Boolean  @default(false)
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  categoryId  String
  category    Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  
  // Relations
  colorVariants ColorVariant[]
  tags        ProductTag[]

  @@map("products")
}

// Color-specific variant with its own images, pricing, and stock
model ColorVariant {
  id        String   @id @default(cuid())
  // Color information
  colorName String   // Display name (e.g., "Black", "Red")
  colorSlug String   // URL slug (e.g., "black", "red")
  colorHex  String?  // Hex color code for swatches
  
  // Pricing (can override base product pricing)
  price     Float?   // Override price for this color
  salePrice Float?   // Sale price for this color
  saleStartDate DateTime?
  saleEndDate   DateTime?
  
  // Stock and availability
  stock     Int      @default(0)
  isActive  Boolean  @default(true)
  
  // SEO
  metaTitle       String?
  metaDescription String?
  
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  // Relations
  images    ColorVariantImage[]
  sizes     ColorVariantSize[]

  @@unique([productId, colorSlug])
  @@map("color_variants")
}

// Images specific to each color variant
model ColorVariantImage {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  isPrimary Boolean  @default(false)
  order     Int      @default(0)
  createdAt DateTime @default(now())

  colorVariantId String
  colorVariant   ColorVariant @relation(fields: [colorVariantId], references: [id], onDelete: Cascade)

  @@map("color_variant_images")
}

// Size and stock information per color variant
model ColorVariantSize {
  id        String   @id @default(cuid())
  size      String   // Size value (e.g., "S", "M", "L", "36", "37")
  stock     Int      @default(0)
  sku       String?  @unique // Full SKU for this size/color combination
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  colorVariantId String
  colorVariant   ColorVariant @relation(fields: [colorVariantId], references: [id], onDelete: Cascade)

  @@unique([colorVariantId, size])
  @@map("color_variant_sizes")
}

model Tag {
  id        String   @id @default(cuid())
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())

  products  ProductTag[]

  @@map("tags")
}

model ProductTag {
  id        String   @id @default(cuid())
  
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  
  tagId     String
  tag       Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([productId, tagId])
  @@map("product_tags")
} 