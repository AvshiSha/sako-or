generator client {
  provider = "prisma-client-js"
  // Force regeneration for production
}

datasource db {
  provider = "postgresql" // PostgreSQL for production
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

model NewsletterEmails {
  id        String   @id @default(cuid())
  email     String   @unique
  createdAt DateTime @default(now())
  isActive  Boolean  @default(true)

  @@map("newsletter_emails")
}

model Category {
  id          String     @id @default(cuid())
  name_en     String     @unique
  name_he     String     @unique
  slug_en     String     @unique
  slug_he     String     @unique
  description String?
  image       String?
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  products    Product[]  @relation("CategoryProducts")
  isEnabled   Boolean    @default(true)
  sortOrder   Int        @default(0)
  level       Int        @default(0)
  parentId    String?
  parent      Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id], onDelete: Cascade)
  children    Category[] @relation("CategoryHierarchy")

  @@map("categories")
}

model Product {
  id                   String         @id @default(cuid())
  // Bilingual fields
  title_en             String
  title_he             String
  description_en       String
  description_he       String
  // Core product fields
  sku                  String         @unique
  brand                String
  price                Float
  salePrice            Float?
  currency             String         @default("ILS")
  // Category and path
  category             String
  subCategory          String?
  subSubCategory       String?
  categories_path      String[]
  categories_path_id   String[]
  categoryId           String
  // Status flags
  isEnabled            Boolean        @default(true)
  isDeleted            Boolean        @default(false)
  featured             Boolean        @default(false)
  isNew                Boolean        @default(false)
  isActive             Boolean        @default(true)
  // SEO fields
  seo_title_en         String?
  seo_title_he         String?
  seo_description_en   String?
  seo_description_he   String?
  seo_slug             String?
  searchKeywords       String[]
  // Material & Care (bilingual)
  upperMaterial_en     String?
  upperMaterial_he     String?
  materialInnerSole_en String?
  materialInnerSole_he String?
  lining_en            String?
  lining_he            String?
  sole_en              String?
  sole_he              String?
  heelHeight_en        String?
  heelHeight_he        String?
  shippingReturns_en   String?
  shippingReturns_he   String?
  // Timestamps
  createdAt            DateTime       @default(now())
  updatedAt            DateTime       @updatedAt
  // Relations
  colorVariants        ColorVariant[]
  tags                 ProductTag[]
  categoryRelation     Category       @relation("CategoryProducts", fields: [categoryId], references: [id], onDelete: Cascade)

  @@map("products")
}

model ColorVariant {
  id              String              @id @default(cuid())
  colorName       String
  colorSlug       String
  colorHex        String?
  price           Float?
  salePrice       Float?
  saleStartDate   DateTime?
  saleEndDate     DateTime?
  stock           Int                 @default(0)
  isActive        Boolean             @default(true)
  metaTitle       String?
  metaDescription String?
  createdAt       DateTime            @default(now())
  updatedAt       DateTime            @updatedAt
  productId       String
  images          ColorVariantImage[]
  sizes           ColorVariantSize[]
  product         Product             @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([productId, colorSlug])
  @@map("color_variants")
}

model ColorVariantImage {
  id             String       @id @default(cuid())
  url            String
  alt            String?
  isPrimary      Boolean      @default(false)
  order          Int          @default(0)
  createdAt      DateTime     @default(now())
  colorVariantId String
  colorVariant   ColorVariant @relation(fields: [colorVariantId], references: [id], onDelete: Cascade)

  @@map("color_variant_images")
}

model ColorVariantSize {
  id             String       @id @default(cuid())
  size           String
  stock          Int          @default(0)
  sku            String?      @unique
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  colorVariantId String
  colorVariant   ColorVariant @relation(fields: [colorVariantId], references: [id], onDelete: Cascade)

  @@unique([colorVariantId, size])
  @@map("color_variant_sizes")
}

model Tag {
  id        String       @id @default(cuid())
  name      String       @unique
  slug      String       @unique
  createdAt DateTime     @default(now())
  products  ProductTag[]

  @@map("tags")
}

model ProductTag {
  id        String  @id @default(cuid())
  productId String
  tagId     String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  tag       Tag     @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@unique([productId, tagId])
  @@map("product_tags")
}

model Order {
  id                   String      @id @default(cuid())
  orderNumber          String      @unique
  status               String      @default("pending")
  total                Float
  currency             String      @default("ILS")
  customerName         String?
  customerEmail        String?
  customerPhone        String?
  paymentStatus        String      @default("pending")
  paymentMethod        String?
  paymentData          String?
  cardcomLowProfileId  String?
  cardcomTransactionId String?
  emailSentAt          DateTime? // Track when confirmation email was sent
  emailMessageId       String? // Store Resend message ID for tracking
  createdAt            DateTime    @default(now())
  updatedAt            DateTime    @updatedAt
  orderItems           OrderItem[]
  payments             Payment[]

  @@map("orders")
}

model OrderItem {
  id          String   @id @default(cuid())
  quantity    Int
  price       Float
  total       Float
  productName String
  productSku  String
  colorName   String?
  size        String?
  createdAt   DateTime @default(now())
  orderId     String
  order       Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("order_items")
}

model Payment {
  id                   String   @id @default(cuid())
  amount               Float
  currency             String   @default("ILS")
  status               String   @default("pending")
  cardcomLowProfileId  String?
  cardcomTransactionId String?
  cardcomResponseCode  Int?
  cardcomDescription   String?
  paymentMethod        String?
  last4Digits          String?
  cardBrand            String?
  tokenId              String?
  tokenExpiry          String?
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  orderId              String
  order                Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payments")
}

model PaymentToken {
  id            String   @id @default(cuid())
  token         String   @unique
  last4Digits   String?
  cardBrand     String?
  cardExpiry    String?
  isActive      Boolean  @default(true)
  customerEmail String?
  customerName  String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@map("payment_tokens")
}

model Checkout {
  id                    String   @id @default(cuid())
  createdAt             DateTime @default(now())
  updatedAt             DateTime @updatedAt
  customerEmail         String
  customerFirstName     String
  customerLastName      String
  customerPhone         String
  customerStreetName    String
  customerStreetNumber  String
  customerFloor         String?
  customerApartment     String?
  customerCity          String
  customerState         String
  customerZip           String?
  customerCountry       String
  customerID            String?
  customerDeliveryNotes String?

  @@map("checkouts")
}

model ContactMessage {
  id        String   @id @default(cuid())
  fullName  String
  email     String
  subject   String
  message   String   @db.Text
  createdAt DateTime @default(now())

  @@map("contact_messages")
}